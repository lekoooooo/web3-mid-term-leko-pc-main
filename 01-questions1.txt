Google Form : 


1. 
Question : "რა არის !important-ი css-ში და შეგვიძლია თუ არა მისი გამოყენება tailwind-ში?" 
Answer : 
!important შეგვიძლია მივანიჭოთ css-ში ნებისმიერ კლასს, რომელიც აპრიორიტეტებს კონკრეტულს დანარჩენთან შედარებით,
შეგვიძლია ტაიპსკრიპტშიც გამოვიყენოთ !-სახით, არ არის საჭირო !importantის დაწერა.
2. 
Question : "რა არის <iframe>?" 
Answer : 
ის უბრალოდ გვიხსნის მცირე რეზოლუციაზე blank pageს
3.
Question : "მოიყვანეთ სემანტიკური ელემენტების მაგალითები" 
Answer : 
<header><div>bla bla bla</div></header> <footer></footer > 
4.
Question : "რა განსხვავებებია position: relative-ს, fixed-ს, absolute-სა და sticky-ის შორის?" 
Answer : 
relative ეწერება მშობელ დივს რომლის შვილ ელემენტს მითითებული absolute იწყებს მოძრაობას, დაფიქსული გმაოიყენება მაშინ, როცა 
მაგ:ჰედერი გვინდა დაგვყვებოდეს სქროლზე, sticky  კიდე ერთ კონკრეტულ ადგილზე შეგვიძლია "მივაწებოთ" და იყოს იქ
5.
Question : "რითი განსხვავდება rem და em-ი ერთმანეთისგან?" 
Answer : 
rem- კონკრეტულ ელემენტს უზრდის ხოლო em- იღებს მისი მშობლიდან და ამრავლებს რამდენიც გვინდა
 მაგ:<div> <h1>bla bla </h1></div> .h1{font-size:2em}ანუ ორზე გადაამრავლებს მშობელ დივს
6.
Question : "რა არის ვირტუალური DOM-ი?" 
Answer : 
vdom-ი არის რეაქტიდან წამოსული ვირტუალური სივრცე რომელიც დაკლონილია ორიგინალი ბრაუზერისგან,
 სადაც ცვლილებებს ადარებს და რა ლემეენტიც შეიცვალა მხოლოდ იმას ანახლებს.
7.
Question : "რა არის useEffect-ის გამოყენების მიზანი?"
Answer : 
ის გვეხმარება დავამატოთ ტაიმერები, API-ს fetch-ის საუკეთესო გზაა, შეგვიძლია დავამატოთ event listener-ები

8.
Question : "რა არის Zustand-ი?" 
Answer : 
zustand-ი არის ბიბლიოთეკა რომელიც მარტივად რომ ვთქვათ ანაცვლებს useState-ს 
9.
Question : "რა არის და როგორ შვქმნათ დინამიური როუთი Next.js-ში" 
Answer : 
folder-ების სტრუქტურაში app-ის შვილად უნდა შევქმნათ ( დინამიური როუთი :(id)/[id]...) სადაც მოვათავსებთ ფოლდერს რომელშიც გაკეთდება page.tsx და დავაიმპორტებთ მისთვის შესაბამისს კომპონენტს რომელსაც id მნიშვნელობა აქვს

10.
Question : "რისთვის ამოიყენება (home) ფოლდერის დასახლება Next-ში. " 
Answer : 
(home)- ()- მალავს url-ში მის შიგნით ჩაწერილ როუთს რომელიც ამ შემთხვევაში home-ა
ანუ, თუ : shefaseba.com/home/grade/results ამის გმაოყენებით shefaseba.com/grade/results
home-ს უბრალოდ დამალავს საძიებო ველიდან 


11.
Question: "რა განსხვავებაა useState-ით, useRef-ით და უბრალოდ `let a = 5`-ით შექმნილ ცვლადებს შორის?"
Answer:
useState — ყოველჯერზე როდესაც მას შევცვლით გვერდი ხელახლა იტვირთება

useRef — ცვლადი მნიშვნელობისთვის, რომელიც რჩება  მაგრამ არ ტვირთავს ხელახლა გვერდს

let — რენდერში არსებული დროებითი ცვლადი,  რომელიც ყოველ ჯერზე იტვირთება

12.

Question: "რისთვის გვჭირდება setState?"
Answer:
მაგრმა setState-ს საშუალებით ჩვენ შეგვიძლია გავაგებინოთ რეაქტს რომ კონკრეტული მდგომარეობა შეიცვალა და useState საჭიროებს განახლებას ანუ რე-რენდერინგს

13.

Question: "რისთვის გვჭირდება return-ი useEffect-ში?"
Answer:
 რომ ვაცოდინოთ მას ამის გამოყენების შემდეგ გაწმინდოს/ საწყის სთეითს დაუბრუნდეს კოდი




App.jsx-ში არესბული კოდის მიხედვით ჩასვით პასუხები.

14.

Question: "რა არის საწყისი მნიშვნელობა popupTitle state-ის?"
Answer:
ცარიელი სტრინგი

15.

Question: "რას აკეთებს togglePopup ფუნქცია?"
Answer:
თუ ეს ფუნქცია შესრულდა, რაღაც ფანჯარა ამოხტეს 

16.

Question: "რას აკეთებს handleTitleChange ფუნქცია?"
Answer:
ეს არის event handler-ი რომელსაც გადავეცით event-ი რომელიც უყურებს მისი value რითი შეიცვალა
შესაბამისად ამ სთეითში შეინახება ის, რასაც მომხმარებელი ჩაწერს popupTItle

17.

Question: "რას აკეთებს handleMessageChange ფუნქცია?"
Answer:
ეს დაახლოებით იგივეა რაც handleTitleChange, მაგრამ მომხმარებლის მიერ ჩაწერილი ტექსტი გამოჩნდება popupMessageში


18.

Question: `{isPopupVisible ? 'Hide Popup' : 'Show Popup'}` რას აკეთებს ეს კონკრეტული ბრძანება?
Answer:
ვეკითხებით კოდს, თუ popup ფანჯარა უკვე ჩანს, მაშინ დამალოს ხოლო თუ დამალულია მაშინ გამოაჩინოს

19.

Question: `{isPopupVisible && (code)}` რისთვის გამოიყენება `&&` სიმბოლო?
Answer:
&& გადმოითარგმნება როგორც და, ანუ თუ pop up ფანჯარა გვაქვს და კოდი ....
